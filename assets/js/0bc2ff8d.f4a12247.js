"use strict";(self.webpackChunkheac_framework_docs=self.webpackChunkheac_framework_docs||[]).push([[8384],{8924:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>r,contentTitle:()=>n,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var i=a(7624),s=a(2172);const l={},n="TextBlock_StatValue",o={id:"HF-Stats/Display/Stat-Widgets/TextBlock_StatValue",title:"TextBlock_StatValue",description:"A TextBlock_StatValue is a TextBlock widget that implements the IStatWidgetInterface and displays the Target Value of a Stat.",source:"@site/docs/01-HF-Stats/06-Display/02-Stat-Widgets/03-TextBlock_StatValue.md",sourceDirName:"01-HF-Stats/06-Display/02-Stat-Widgets",slug:"/HF-Stats/Display/Stat-Widgets/TextBlock_StatValue",permalink:"/docs/HF-Stats/Display/Stat-Widgets/TextBlock_StatValue",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"hfstatsSidebar",previous:{title:"TextBlock_StatName",permalink:"/docs/HF-Stats/Display/Stat-Widgets/TextBlock_StatName"},next:{title:"ProgressBar_Stat",permalink:"/docs/HF-Stats/Display/Stat-Widgets/ProgressBar-Stat"}},r={},c=[{value:"Details Panel",id:"details-panel",level:2},{value:"Smooth Value",id:"smooth-value",level:3},{value:"Stat Base Class and Target Value",id:"stat-base-class-and-target-value",level:3},{value:"Value Display Format",id:"value-display-format",level:3},{value:"Initialization",id:"initialization",level:2}];function d(t){const e={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.M)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"textblock_statvalue",children:"TextBlock_StatValue"}),"\n",(0,i.jsx)(e.p,{children:"A TextBlock_StatValue is a TextBlock widget that implements the IStatWidgetInterface and displays the Target Value of a Stat."}),"\n",(0,i.jsx)("img",{src:"/img/doc/HF-Stats/TextBlockStatValue.jpg"}),"\n",(0,i.jsx)(e.p,{children:"Dropping a TextBlock_StatValue in your Blueprint Widget will give you acces to some settings in the details panel."}),"\n",(0,i.jsx)("img",{src:"/img/doc/HF-Stats/TextBlockStatValueDetails.jpg"}),"\n",(0,i.jsx)(e.h2,{id:"details-panel",children:"Details Panel"}),"\n",(0,i.jsx)(e.h3,{id:"smooth-value",children:"Smooth Value"}),"\n",(0,i.jsxs)(e.p,{children:["See ",(0,i.jsx)(e.a,{href:"../Smooth-Value",children:"Smooth Value"}),"."]}),"\n",(0,i.jsx)(e.h3,{id:"stat-base-class-and-target-value",children:"Stat Base Class and Target Value"}),"\n",(0,i.jsx)("img",{src:"/img/doc/HF-Stats/StatClassAndTargetValue.jpg"}),"\n",(0,i.jsxs)(e.p,{children:["You can select your Stat, then use the Target Value options.",(0,i.jsx)(e.br,{}),"\n","You may wonder why there's an option to display the Minimum / Maximum / Regeneration since we can directly select the Stat we want to display.",(0,i.jsx)(e.br,{}),"\n","There are two reasons:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"To display values that aren't Stats. Minimum, Maximum and Regeneration could be flat values."}),"\n",(0,i.jsx)(e.li,{children:"To create an reusable widget that you can initialize with a single Stat."}),"\n"]}),"\n",(0,i.jsxs)(e.admonition,{title:"Example",type:"note",children:[(0,i.jsxs)(e.p,{children:["I want to create multiple widgets for each Complex Stat that will display its Display Name, Final Value and Maximum.",(0,i.jsx)(e.br,{}),"\n",'I can add a "Text Block Stat Name" for the name, and two "Text Block Stat Value" for the Final Value and Maximum.']}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/MyWidget.jpg"}),(0,i.jsxs)(e.p,{children:["For any of those widgets, we won't need to specify a Stat Base Class since we'll be initializing them with a Stat.",(0,i.jsx)(e.br,{}),"\n","Therefore, I can let the Stat Name as is.",(0,i.jsx)(e.br,{}),"\n","For the first Text Block Stat Value, since I want to display the Final Value, I can also keep its default values.",(0,i.jsx)(e.br,{}),"\n",'For the second one however, I\'ll simply select "Maximum".']}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/StatMaximumWidget.jpg"}),(0,i.jsxs)(e.p,{children:["We can now add them to our main Widget.",(0,i.jsx)(e.br,{}),"\n","In my case, I'll just use a Vertical Box."]}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/VerticalBox.jpg"}),(0,i.jsx)(e.p,{children:'Click the "IsVariable" checkbox on the top right corner to be able to initialize them later.'}),(0,i.jsx)(e.p,{children:"Now, let's create a StatsComponent variable for our main Widget. Make it Editable and Expose on Spawn."}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/StatsComponentWidget.jpg"}),(0,i.jsxs)(e.p,{children:['We can now initialize our 3 widgets inside our main widget. Simply call "InitializeWidgets_FromStat()" on all three.',(0,i.jsx)(e.br,{}),"\n","I'll also rename them properly."]}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/InitializeStatWidgets.jpg"}),(0,i.jsx)(e.p,{children:"Now, when we create our main widget, we'll just need to give it a StatsComponent."}),(0,i.jsx)("img",{src:"/img/doc/HF-Stats/AddMainWidget.jpg"})]}),"\n",(0,i.jsx)(e.h3,{id:"value-display-format",children:"Value Display Format"}),"\n",(0,i.jsxs)(e.p,{children:["You can add a Value Display Format that will be automatically applied (see ",(0,i.jsx)(e.a,{href:"../Value-Display-Format",children:"Value Display Format"}),")."]}),"\n",(0,i.jsx)(e.h2,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsxs)(e.p,{children:["TextBlock_StatValue implements the ",(0,i.jsx)(e.strong,{children:"IStatWidgetInterface"}),", so it can be initialized as any Stat Widget.",(0,i.jsx)(e.br,{}),"\n","See ",(0,i.jsx)(e.a,{href:"Initialize-a-Stat-Widget",children:"Initialize a Stat Widget"}),"."]})]})}function u(t={}){const{wrapper:e}={...(0,s.M)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},2172:(t,e,a)=>{a.d(e,{I:()=>o,M:()=>n});var i=a(1504);const s={},l=i.createContext(s);function n(t){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:n(t.components),i.createElement(l.Provider,{value:e},t.children)}}}]);