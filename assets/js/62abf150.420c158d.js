"use strict";(self.webpackChunkheac_framework_docs=self.webpackChunkheac_framework_docs||[]).push([[652],{8844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7624),r=n(2172);const i={},l="Stat Default Values (SDV)",s={id:"HF-Stats/Default-Values/Stat-Default-Values",title:"Stat Default Values (SDV)",description:"When creating a Data Table for the default values of your Stats, you'll have to choose a SDV (Stat Default Values) structure",source:"@site/docs/01-HF-Stats/05-Default-Values/02-Stat-Default-Values.md",sourceDirName:"01-HF-Stats/05-Default-Values",slug:"/HF-Stats/Default-Values/Stat-Default-Values",permalink:"/docs/HF-Stats/Default-Values/Stat-Default-Values",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"hfstatsSidebar",previous:{title:"Default Setup",permalink:"/docs/HF-Stats/Default-Values/Default-Setup"},next:{title:"Custom Structure",permalink:"/docs/HF-Stats/Default-Values/Custom-Structure"}},o={},d=[{value:"SDV_Minimal",id:"sdv_minimal",level:2},{value:"SDV_Advanced",id:"sdv_advanced",level:2},{value:"Parenting System",id:"parenting-system",level:3},{value:"Adding Complex Stats",id:"adding-complex-stats",level:3},{value:"Value Type:",id:"value-type",level:4},{value:"Value Influences:",id:"value-influences",level:4},{value:"Practical Example",id:"practical-example",level:4},{value:"Adding Progress Stats",id:"adding-progress-stats",level:3},{value:"Level Range",id:"level-range",level:3}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"stat-default-values-sdv",children:"Stat Default Values (SDV)"}),"\n",(0,a.jsx)(t.p,{children:"When creating a Data Table for the default values of your Stats, you'll have to choose a SDV (Stat Default Values) structure\r\ntype."}),"\n",(0,a.jsx)(t.h2,{id:"sdv_minimal",children:"SDV_Minimal"}),"\n",(0,a.jsx)(t.p,{children:"SDV_Minimal provides an array of Stats with their Value, along with Value Influences."}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/SDV_Minimal.jpg"}),"\n",(0,a.jsx)(t.h2,{id:"sdv_advanced",children:"SDV_Advanced"}),"\n",(0,a.jsxs)(t.p,{children:["SDV_Advanced supports a ",(0,a.jsx)(t.strong,{children:"Parenting System"})," and ",(0,a.jsx)(t.strong,{children:"Value Progression"})," depending on the Level."]}),"\n",(0,a.jsx)(t.h3,{id:"parenting-system",children:"Parenting System"}),"\n",(0,a.jsxs)(t.p,{children:["The Parenting System inside a SDV_Advanced Table allows you to make a Row ",(0,a.jsx)(t.strong,{children:"inherit"})," its values and influences ",(0,a.jsx)(t.strong,{children:"from another Row"}),"\r\ninside the Data Table and ",(0,a.jsx)(t.strong,{children:"override or modify them"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Each Row will inherit from every Stat present in the Parents hierarchy"})," (Complex Stat or Progress Stat).",(0,a.jsx)(t.br,{}),"\n","Adding a Stat will give you the opportunity to set its ",(0,a.jsx)(t.strong,{children:"Base Value"})," and ",(0,a.jsx)(t.strong,{children:"Value Influences"})," (if no parent includes this stat),\r\nor override / modify the Parent's ",(0,a.jsx)(t.strong,{children:"Base Value"})," and ",(0,a.jsx)(t.strong,{children:"Value Influences"}),"."]}),"\n",(0,a.jsxs)(t.admonition,{title:"Example",type:"note",children:[(0,a.jsx)("img",{src:"/img/doc/HF-Stats/ParentingImage.jpg",width:"700"}),(0,a.jsx)(t.p,{children:"In this example:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Warrior, Ranger and Wizard inherit from Default."}),"\n",(0,a.jsx)(t.li,{children:"Demon Warrior inherits from Warrior"}),"\n",(0,a.jsx)(t.li,{children:"Bandit and Skeleton_Archer inherit from Ranger"}),"\n",(0,a.jsx)(t.li,{children:"Undead Mage inherits from Wizard"}),"\n"]}),(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"You're not obligated to make a Default row as in this example, but it can be useful to have a root for Stats that are shared between all children."})})]}),"\n",(0,a.jsxs)(t.p,{children:["Along with ",(0,a.jsx)(t.strong,{children:"modifying their parent values"})," (the Warrior might have more Constitution, the Wizard more Intellect), Rows can also have\r\n",(0,a.jsx)(t.strong,{children:"different Value Influences"})," (the Ranger might change how its Attack Power is calculated)."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"There is no limit to the number of Parents you can create, and don't worry about it taking a load when initializing a StatsComponent during runtime:\r\nwhen the Default Values are first used, the Default Values Manager will compute the SDV_Advanced tables to generate a new Data Table with static rows for\r\neach entry using their parent values."})}),"\n",(0,a.jsx)(t.h3,{id:"adding-complex-stats",children:"Adding Complex Stats"}),"\n",(0,a.jsx)(t.p,{children:"You can add Complex Stats to the Complex Stats and Values array."}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/SDV_Advanced_Row_Empty.jpg"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["In this example, the row ",(0,a.jsx)(t.strong,{children:"Skeleton_Archer"})," will inherit all Stats from the row ",(0,a.jsx)(t.strong,{children:"Ranger"})," (which itself inherits from the row\r\n",(0,a.jsx)(t.strong,{children:"Default"}),").",(0,a.jsx)(t.br,{}),"\n","Also, ",(0,a.jsx)(t.strong,{children:"Skeleteon_Archer"}),' is adding or overriding the Stat "Agility" with a Base Value of 10 and a\r\n',(0,a.jsx)(t.a,{href:"../StatsComponent/Value-Influence",children:(0,a.jsx)(t.strong,{children:"Value Influence"})})," that uses\r\na curve depending on the ",(0,a.jsx)(t.a,{href:"../StatsComponent/Level-Stat",children:"Level"}),"."]})}),"\n",(0,a.jsx)(t.h4,{id:"value-type",children:"Value Type:"}),"\n",(0,a.jsx)(t.p,{children:"The Value Type will determine how the Value will affect the Base Value of your Stat:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Override Base Value"}),": Set the Base Value at the specified amount"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Base Value Modifier (%)"}),": Modify the parent Base Value by a modifier (12 -> +12%, -37 -> -37%)"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"value-influences",children:"Value Influences:"}),"\n",(0,a.jsxs)(t.p,{children:["The Parenting System also works with ",(0,a.jsx)(t.a,{href:"../StatsComponent/Value-Influence",children:"Value Influences"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"A Stat inherits all value Influences from the Parent Stat"}),"\n",(0,a.jsx)(t.li,{children:"You can add new Value Influences or override a Value Influence from the Parent by using the same ID"}),"\n",(0,a.jsx)(t.li,{children:"Overriding the Parent Operation with an empty Operation will remove the Value Influence, even if it's present in the Parent."}),"\n",(0,a.jsx)(t.li,{children:"Overriding the Parent Curve with an empty Curve will remove the Curve, but keep the operation"}),"\n"]}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsxs)(t.p,{children:["In the image above, we're overriding the Value Influence ",(0,a.jsx)(t.strong,{children:"Agility_FromLevel"})," in the ",(0,a.jsx)(t.strong,{children:"Agility"})," stat by overriding the Parent\r\nOperation and overriding the Parent Curve.",(0,a.jsx)(t.br,{}),"\n","If this Value Influence (",(0,a.jsx)(t.strong,{children:"Agility_FromLevel"}),") didn't exist in the ",(0,a.jsx)(t.strong,{children:"Agility"})," stat of the Parent, it will\r\nsimply create it."]}),(0,a.jsxs)(t.p,{children:["In effect, this will add to ",(0,a.jsx)(t.strong,{children:"Agility"}),' a value progression based on the Level using the "AgilityFromLevel" curve.']})]}),"\n",(0,a.jsx)(t.h4,{id:"practical-example",children:"Practical Example"}),"\n",(0,a.jsxs)(t.p,{children:["In the following example for the ",(0,a.jsx)(t.strong,{children:"AttackPower"})," stat, I'm adding a 50% modifier to the Parent value. (If the Parent's Agility has a\r\nBase Value of 10, it should now be 15 for this Row).",(0,a.jsx)(t.br,{}),"\n","I'm also creating or overriding two Value Influences: ",(0,a.jsx)(t.strong,{children:"AttackPower_FromAgility"})," and ",(0,a.jsx)(t.strong,{children:"AttackPower_FromStrength"}),"."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/SDVAttackPowerExample.jpg"}),"\n",(0,a.jsxs)(t.p,{children:["We could also have combined those two Value Influences into a single ID: ",(0,a.jsx)(t.code,{children:"{Strength} + {Agility} *1.5"}),", but separating\r\nValue Influences like I did in this example will allow me to override only one ID in the future."]}),"\n",(0,a.jsxs)(t.p,{children:["For example, if a child of this Row only wants to modify how Strength will affect its Attack Power, I would only have to\r\noverride ",(0,a.jsx)(t.strong,{children:"AttackPower_FromStrength"})," instead of rewriting the whole operation."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["Value Influences created through the ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"Default Values Table"})}),' will target the default Value Set and the Value Type "Value\r\nInfluence".']})}),"\n",(0,a.jsx)(t.h3,{id:"adding-progress-stats",children:"Adding Progress Stats"}),"\n",(0,a.jsx)(t.p,{children:"You can also add Progress Stats."}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/ProgressStatsAndValues.jpg"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Reset on Level Up"}),": Whenever the Level value increases, will reset the Progress Stat to the specified value"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Type"}),": Choose whether you want to apply a Ratio in percent or a flat amount"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Value"}),": The Value (in percent or flat amount)"]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"note",children:(0,a.jsx)(t.p,{children:"In the image above, the Health stat will be set at 100% (the Maximum Health Value) when the game starts, and reset to 100% whenever the integer\r\nvalue of Level increases."})}),"\n",(0,a.jsx)(t.admonition,{title:"Important",type:"warning",children:(0,a.jsxs)(t.p,{children:["To use the ",(0,a.jsx)(t.strong,{children:"Ratio"})," Type, make sure your Progress Stat has a Maximum Value."]})}),"\n",(0,a.jsx)(t.h3,{id:"level-range",children:"Level Range"}),"\n",(0,a.jsxs)(t.p,{children:["While optional, the Level Range can help you determine the starting Level of Actors created using the ",(0,a.jsx)(t.strong,{children:"SDV_Advanced"})," structure."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/LevelRange.jpg"}),"\n",(0,a.jsx)(t.p,{children:"The Level Range will always override  its parent row."}),"\n",(0,a.jsx)(t.p,{children:"You can use it to load the Default Values of your StatsComponent."}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/UseLevelRange.jpg"}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"note",children:(0,a.jsxs)(t.p,{children:["By using the same archetypes found in the illustration of the ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.a,{href:"#parenting-system",children:"Parenting System"})})," above, I will determine the Level Range of my\r\ndifferent rows.",(0,a.jsx)(t.br,{}),"\n","Since only players can directly use Warrior, Ranger and Wizard archetypes, I will set their Level Range to (1,1). This way, they will always start\r\nat Level 1.",(0,a.jsx)(t.br,{}),"\n","For Demon Warrior, Bandit, Skeleton Archer and Undead Mage, I can randomly pick from their Level Range to Initialize their Stats. For example, the\r\nBandit could have a Level Range of (1,2), the Skeleton Archer of (2,4), and the Demon Warrior would only be level 10 (10,10)."]})})]})}function c(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>s,M:()=>l});var a=n(1504);const r={},i=a.createContext(r);function l(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);