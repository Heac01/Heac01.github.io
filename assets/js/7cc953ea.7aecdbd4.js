"use strict";(self.webpackChunkheac_framework_docs=self.webpackChunkheac_framework_docs||[]).push([[2236],{8376:(e,l,s)=>{s.r(l),s.d(l,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>n,metadata:()=>r,toc:()=>d});var t=s(7624),i=s(2172);const n={},a="Value Set",r={id:"HF-Stats/Stats/Complex-Stat/Value-Sets-Manager/Value-Set",title:"Value Set",description:"A Value Set is a UObject subclass with a value determined by its Value Types.",source:"@site/docs/01-HF-Stats/04-Stats/02-Complex-Stat/01-Value-Sets-Manager/02-Value-Set.md",sourceDirName:"01-HF-Stats/04-Stats/02-Complex-Stat/01-Value-Sets-Manager",slug:"/HF-Stats/Stats/Complex-Stat/Value-Sets-Manager/Value-Set",permalink:"/docs/HF-Stats/Stats/Complex-Stat/Value-Sets-Manager/Value-Set",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"hfstatsSidebar",previous:{title:"Setup",permalink:"/docs/HF-Stats/Stats/Complex-Stat/Value-Sets-Manager/Setup"},next:{title:"Value Type",permalink:"/docs/HF-Stats/Stats/Complex-Stat/Value-Sets-Manager/Value-Type"}},u={},d=[{value:"Value Set Mode",id:"value-set-mode",level:2},{value:"Regular",id:"regular",level:3},{value:"Regular Value Set Example",id:"regular-value-set-example",level:4},{value:"Multiplier",id:"multiplier",level:3},{value:"Multiplier Value Set Example",id:"multiplier-value-set-example",level:4},{value:"Super Multiplier",id:"super-multiplier",level:3},{value:"Super Multiplier Value Set Example",id:"super-multiplier-value-set-example",level:4},{value:"Get",id:"get",level:2}];function o(e){const l={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h1,{id:"value-set",children:"Value Set"}),"\n",(0,t.jsxs)(l.p,{children:["A ",(0,t.jsx)("span",{class:"ValueSet",children:(0,t.jsx)(l.strong,{children:"Value Set"})})," is a UObject subclass with a value determined by its ",(0,t.jsx)("span",{class:"ValueType",children:(0,t.jsx)(l.strong,{children:"Value Types"})}),".",(0,t.jsx)(l.br,{}),"\n","It is used inside a ",(0,t.jsx)(l.strong,{children:"Value Sets Manager"})," to determine its ",(0,t.jsx)(l.strong,{children:"Value Total"})]}),"\n",(0,t.jsx)(l.h2,{id:"value-set-mode",children:"Value Set Mode"}),"\n",(0,t.jsxs)(l.p,{children:["When creating a ",(0,t.jsx)("span",{class:"ValueSet",children:(0,t.jsx)(l.strong,{children:"Value Set"})}),", you'll be able to specify a ",(0,t.jsx)(l.strong,{children:"Mode"})," in its ",(0,t.jsx)(l.strong,{children:"Details panel"}),"."]}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/ValueSetModeDropdown.jpg"}),"\n",(0,t.jsxs)(l.p,{children:["This ",(0,t.jsx)(l.strong,{children:"Mode"})," will determine the behavior of the ",(0,t.jsx)("span",{class:"ValueSet",children:(0,t.jsx)(l.strong,{children:"Value Set"})}),".",(0,t.jsx)(l.br,{}),"\n","There currently exists three modes:"]}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.strong,{children:"Regular"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.strong,{children:"Multiplier"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.strong,{children:"Super Multiplier"})}),"\n"]}),"\n",(0,t.jsx)(l.h3,{id:"regular",children:"Regular"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.strong,{children:"Default Value"})," of a ",(0,t.jsx)(l.strong,{children:"Regular"})," Value Set is ",(0,t.jsx)(l.strong,{children:"0"})," and its ",(0,t.jsx)("span",{class:"ValueType",children:(0,t.jsx)(l.strong,{children:"Value Types"})})," and\r\n",(0,t.jsx)("span",{class:"IDValue",children:(0,t.jsx)(l.strong,{children:"ID Values"})})," are ",(0,t.jsx)(l.strong,{children:"added"})," together.",(0,t.jsx)(l.br,{}),"\n","It means that a ",(0,t.jsx)(l.strong,{children:"Regular"})," Value Set will return ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"0 + ValueType1 + ValueType2 + etc."})}),"."]}),"\n",(0,t.jsxs)(l.p,{children:["A ",(0,t.jsxs)(l.strong,{children:["newly registered ",(0,t.jsx)("span",{class:"IDValue",children:"ID Value"})]})," will also have a ",(0,t.jsx)(l.strong,{children:"Default Value"})," of ",(0,t.jsx)(l.strong,{children:"0"}),".",(0,t.jsx)(l.br,{}),"\n","Therefore, using ",(0,t.jsx)("span",{class:"function",children:"ModifyIDValue()"})," with an ID that doesn't exist yet in a ",(0,t.jsx)(l.strong,{children:"Regular"})," Value Set will set its value to\r\n",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"0 + Modifier"})}),"."]}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/ModifyIDValueExample.jpg"}),"\n",(0,t.jsxs)(l.p,{children:['In this example, if "NewID" already exists, it will just add 5 to it.',(0,t.jsx)(l.br,{}),"\n","If it doesn't exist, it will set it to ",(0,t.jsx)(l.code,{children:"DefaultValue + Modifier = 0 + 5 = 5"}),"."]}),"\n",(0,t.jsx)(l.h4,{id:"regular-value-set-example",children:"Regular Value Set Example"}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/RegularValueSetMap.jpg"}),"\n",(0,t.jsx)(l.h3,{id:"multiplier",children:"Multiplier"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.strong,{children:"Default Value"})," of a ",(0,t.jsx)(l.strong,{children:"Multiplier"})," Value Set is ",(0,t.jsx)(l.strong,{children:"1"})," and its ",(0,t.jsx)("span",{class:"ValueType",children:(0,t.jsx)(l.strong,{children:"Value Types"})})," and\r\n",(0,t.jsx)("span",{class:"IDValue",children:(0,t.jsx)(l.strong,{children:"ID Values"})})," are ",(0,t.jsx)(l.strong,{children:"added"})," together.",(0,t.jsx)(l.br,{}),"\n","It means that a ",(0,t.jsx)(l.strong,{children:"Multiplier"})," Value Set will return ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"1 + ValueType1 + ValueType2 + etc."})}),"."]}),"\n",(0,t.jsxs)(l.p,{children:["A ",(0,t.jsxs)(l.strong,{children:["newly registered ",(0,t.jsx)("span",{class:"IDValue",children:"ID Value"})]})," will have a ",(0,t.jsx)(l.strong,{children:"Default Value"})," of ",(0,t.jsx)(l.strong,{children:"0"}),".",(0,t.jsx)(l.br,{}),"\n","Therefore, using ",(0,t.jsx)("span",{class:"function",children:"ModifyIDValue()"})," with an ID that doesn't exist yet in a ",(0,t.jsx)(l.strong,{children:"Multiplier"})," Value Set will set its value\r\nto ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"0 + Modifier"})}),"."]}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/ModifyMultiplierValueSet.jpg"}),"\n",(0,t.jsxs)(l.p,{children:['In this example, if "NewID" already exists, it will just add 0.1 to it.',(0,t.jsx)(l.br,{}),"\n","If it doesn't exist, it will set it to ",(0,t.jsx)(l.code,{children:"DefaultValue + Modifier = 0 + 0.1 = 0.1"}),".",(0,t.jsx)(l.br,{}),"\n","If we used a negative value, for example -0.1, it would set it to ",(0,t.jsx)(l.code,{children:"DefaultValue + Modifier = 0 - 0.1 = -0.1"})]}),"\n",(0,t.jsx)(l.h4,{id:"multiplier-value-set-example",children:"Multiplier Value Set Example"}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/MultiplierValueSetMap.jpg"}),"\n",(0,t.jsxs)(l.admonition,{type:"note",children:[(0,t.jsx)(l.p,{children:"This is how a standard multiplier usually works. A Multiplier increase of 10% isn't absolute and doesn't guarantee an overall increase of 10% on\r\nthe Final Value."}),(0,t.jsxs)(l.p,{children:["Consider a Strength Regular value of 100 with a Multiplier of 1.2.",(0,t.jsx)(l.br,{}),"\n","Assuming ",(0,t.jsx)("span",{class:"function",children:"GetValueTotal()"})," in the Value Sets Manager multiplies them together, its Final Vale would be",(0,t.jsx)(l.br,{}),"\n",(0,t.jsx)(l.code,{children:"Regular * Multiplier = 100 * 1.2 = 120"}),"."]}),(0,t.jsxs)(l.p,{children:['Now consider this effect: "Increase your Strength by 10%".',(0,t.jsx)(l.br,{}),"\n","In most games, this increase won't be applied to the overall value of the Stat, but rather increase the multiplier.",(0,t.jsx)(l.br,{}),"\n","So, instead of doing this:",(0,t.jsx)(l.br,{}),"\n",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"New Final Value = 120 * 1.1 = 132"})}),".",(0,t.jsx)(l.br,{}),"\n","It will do this:",(0,t.jsx)(l.br,{}),"\n",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"New Final Value = 100 * (1.2 + 0.1) = 130"})}),"."]}),(0,t.jsx)(l.p,{children:"If you want a Mutliplier that always guarantees an absolute multiplication, you'll have to use a Super Multiplier."})]}),"\n",(0,t.jsx)(l.h3,{id:"super-multiplier",children:"Super Multiplier"}),"\n",(0,t.jsxs)(l.p,{children:["The ",(0,t.jsx)(l.strong,{children:"Default Value"})," of a ",(0,t.jsx)(l.strong,{children:"Super Multiplier"})," Value Set is ",(0,t.jsx)(l.strong,{children:"1"})," and its ",(0,t.jsx)("span",{class:"ValueType",children:(0,t.jsx)(l.strong,{children:"Value Types"})})," and\r\n",(0,t.jsx)("span",{class:"IDValue",children:(0,t.jsx)(l.strong,{children:"ID Values"})})," are ",(0,t.jsx)(l.strong,{children:"multiplied"})," together.",(0,t.jsx)(l.br,{}),"\n","It means that a ",(0,t.jsx)(l.strong,{children:"Super Multiplier"})," Value Set will return ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"1 * ValueType1 * ValueType2 * etc."})}),"."]}),"\n",(0,t.jsxs)(l.p,{children:["A ",(0,t.jsxs)(l.strong,{children:["newly registered ",(0,t.jsx)("span",{class:"IDValue",children:"ID Value"})]})," will have a ",(0,t.jsx)(l.strong,{children:"Default Value"})," of ",(0,t.jsx)(l.strong,{children:"1"}),".",(0,t.jsx)(l.br,{}),"\n","For example, using ",(0,t.jsx)("span",{class:"function",children:"ModifyIDValue()"})," with an ID that doesn't exist yet in a ",(0,t.jsx)(l.strong,{children:"Super Multiplier"})," Value Set will set its\r\nvalue to ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"1 + Modifier"})}),"."]}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/ModifySuperMultiplierValueSet.jpg"}),"\n",(0,t.jsxs)(l.p,{children:['In this example, if "NewID" already exists, it will just add 0.1 to it.',(0,t.jsx)(l.br,{}),"\n","If it doesn't exist, it will set it to ",(0,t.jsx)(l.code,{children:"DefaultValue + Modifier = 1 + 0.1 = 1.1"}),".",(0,t.jsx)(l.br,{}),"\n","I we used a negative value, for example -0.1, it would set it to ",(0,t.jsx)(l.code,{children:"DefaultValue + Modifier = 1 - 0.1 = 0.9"}),"."]}),"\n",(0,t.jsx)(l.h4,{id:"super-multiplier-value-set-example",children:"Super Multiplier Value Set Example"}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/SuperMultiplierValueSetMap.jpg"}),"\n",(0,t.jsx)(l.h2,{id:"get",children:"Get"}),"\n",(0,t.jsxs)(l.p,{children:["To get the value of a Value Set, you can use ",(0,t.jsx)("span",{class:"function",children:"GetValueSetValue()"}),"."]}),"\n",(0,t.jsx)("img",{src:"/img/doc/HF-Stats/GetValueSetValue.jpg"})]})}function c(e={}){const{wrapper:l}={...(0,i.M)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},2172:(e,l,s)=>{s.d(l,{I:()=>r,M:()=>a});var t=s(1504);const i={},n=t.createContext(i);function a(e){const l=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(n.Provider,{value:l},e.children)}}}]);