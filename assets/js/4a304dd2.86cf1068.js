"use strict";(self.webpackChunkheac_framework_docs=self.webpackChunkheac_framework_docs||[]).push([[1704],{9364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(7624),i=t(2172);const s={},r="Regeneration",o={id:"HF-Stats/Stats/Progress-Stat/Regeneration",title:"Regeneration",description:"The Regeneration of a Progress Stat can increase or decrease its Final Value over time.",source:"@site/docs/01-HF-Stats/04-Stats/03-Progress-Stat/02-Regeneration.md",sourceDirName:"01-HF-Stats/04-Stats/03-Progress-Stat",slug:"/HF-Stats/Stats/Progress-Stat/Regeneration",permalink:"/docs/HF-Stats/Stats/Progress-Stat/Regeneration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"hfstatsSidebar",previous:{title:"Value",permalink:"/docs/HF-Stats/Stats/Progress-Stat/Value"},next:{title:"Default Values",permalink:"/docs/HF-Stats/Default-Values/"}},l={},c=[{value:"Details Panel",id:"details-panel",level:2},{value:"Pausing the Regeneration",id:"pausing-the-regeneration",level:2},{value:"Additional functions",id:"additional-functions",level:2},{value:"Delegate",id:"delegate",level:2},{value:"Manually apply the regeneration",id:"manually-apply-the-regeneration",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,i.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"regeneration",children:"Regeneration"}),"\n",(0,a.jsxs)(n.p,{children:["The Regeneration of a Progress Stat can increase or decrease its Final Value over time.",(0,a.jsx)(n.br,{}),"\n","It is initialized through its details panel."]}),"\n",(0,a.jsx)(n.h2,{id:"details-panel",children:"Details Panel"}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/ProgressStatRegenerationDefaults.jpg"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:['In this example for my Health Progress Stat, the regeneration is the HealthRegen (Complex Stat) value, applied every time "MyRegenerationTimer"\r\nticks.',(0,a.jsx)(n.br,{}),"\n",'"Regeneration Value Is Per Second" means that, on each tick of the timer, the regeneration value will take into account the Delta Time of the\r\ntimer so that the HealthRegen value is the amount applied per second:',(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.code,{children:"RegenAppliedPerTick = DeltaTime * RegenValue"})]})}),"\n",(0,a.jsx)(n.p,{children:'"Allowed Regen Type" allows you to constrain your regen to a Positive or Negative value.'}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["For the Regeneration Timer, see ",(0,a.jsx)(n.a,{href:"../../StatsComponent/Shared-Timers",children:"Shared Timers"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"pausing-the-regeneration",children:"Pausing the Regeneration"}),"\n",(0,a.jsxs)(n.p,{children:["You can manually pause and unpause the regeneration using ",(0,a.jsx)("span",{class:"function",children:"PauseRegeneration()"})," and\r\n",(0,a.jsx)("span",{class:"function",children:"UnpauseRegeneration()"}),"."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/PauseRegeneration.jpg"}),"\n",(0,a.jsxs)(n.p,{children:["You can get the current pause state of the regeneration using ",(0,a.jsx)("span",{class:"function",children:"IsRegenerationPaused()"}),"."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/IsRegenerationPaused.jpg"}),"\n",(0,a.jsx)(n.h2,{id:"additional-functions",children:"Additional functions"}),"\n",(0,a.jsx)(n.p,{children:'You can find additional functions in the "Regeneration" category in the functions browser.'}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/RegenerationFunctions.jpg"}),"\n",(0,a.jsx)(n.h2,{id:"delegate",children:"Delegate"}),"\n",(0,a.jsxs)(n.p,{children:["Whenever a regeneration value is applied, it will trigger the ",(0,a.jsx)(n.strong,{children:"OnRegenerationApplied"})," delegate."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/OnRegenerationEvent.jpg"}),"\n",(0,a.jsx)(n.h2,{id:"manually-apply-the-regeneration",children:"Manually apply the regeneration"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to manually apply the regeneration (e.g. if you're using your own timer, or for a turn-based game), you can\r\nuse ",(0,a.jsx)("span",{class:"function",children:"ApplyRegeneration()"})," or ",(0,a.jsx)("span",{class:"function",children:"ApplyTickRegeneration()"}),"."]}),"\n",(0,a.jsx)("img",{src:"/img/doc/HF-Stats/ManualRegen.jpg"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("span",{class:"function",children:"ApplyRegeneration()"})," will simply apply the regeneration value.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)("span",{class:"function",children:"ApplyTickRegeneration()"}),' will apply the regeneration value, using the DeltaTime if the\r\n"Regeneration Is Per Second" property is true.']})]})}function g(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>r});var a=t(1504);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);